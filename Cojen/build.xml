<project name="cojen" default="compile" basedir=".">

<!-- Cojen ANT script -->


<!-- ========== Properties ================================================ -->

  <property file="build.properties"/>
  <property name="junit.jar"               value="lib/junit.jar"/>


<!-- ========== Component Declarations ==================================== -->


  <!-- The name of this component -->
  <property name="component.name"          value="cojen"/>

  <!-- The primary package name of this component -->
  <property name="component.package"       value="cojen"/>

  <!-- The title of this component -->
  <property name="component.title"         value="Cojen"/>

  <!-- The current version number of this component -->
  <property name="component.version"       value="1.1.2"/>

  <!-- The current version number of this component -->
  <property name="component.fullname"      value="${component.name}-${component.version}"/>
  
  <!-- The directory of source files -->
  <property name="source"                  value="src"/>
  <property name="source.home"             value="${source}/java"/>

  <!-- The base directory for compilation targets -->
  <property name="build"                   value="build"/>
  <property name="build.classes"           value="${build}/classes"/>
  <property name="build.docs"              value="${build}/docs"/>
  <property name="build.dist"              value="${build}/dist"/>
  <property name="build.fullname"          value="${build}/${component.fullname}"/>
  <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>


<!-- ========== Compiler Defaults ========================================= -->

  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug"           value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation"     value="true"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize"        value="true"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.classes}"/>
  </path>


<!-- ====================================================================== -->
<!-- ========== Executable Targets ======================================== -->
<!-- ====================================================================== -->

  <target name="clean"
          description="Clean build and distribution directories">
    <delete dir="${build}"/>
  </target>

<!-- ====================================================================== -->

  <target name="init"
          description="Initialize and evaluate conditionals">
    <echo message="-------- ${component.name} ${component.version} --------"/>
    <filter token="name"                  value="${component.name}"/>
    <filter token="package"               value="${component.package}"/>
    <filter token="version"               value="${component.version}"/>
  </target>

<!-- ====================================================================== -->

  <target name="prepare" depends="init"
          description="Prepare build directory">
    <mkdir dir="${build}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.docs}"/>
  </target>

<!-- ====================================================================== -->

  <target name="compile" depends="prepare"
          description="Compile Cojen">
    <javac  source="1.4"
            srcdir="${source.home}"
           destdir="${build.classes}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

<!-- ====================================================================== -->

  <target name="all" depends="clean,compile"
          description="Clean and compile all components"/>

<!-- ====================================================================== -->

  <target name="javadoc" depends="compile"
          description="Create component Javadoc documentation">
    <mkdir      dir="${build.docs}"/>
    <javadoc     source="1.4"
             sourcepath="${source.home}"
                destdir="${build.docs}"
           packagenames="cojen.*"
                 author="true"
                private="false"
                package="false"
                version="true"
                    use="yes"
             splitindex="yes"
               doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
            windowtitle="${component.title} (Version ${component.version})">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>

<!-- ====================================================================== -->

  <target name="jar" depends="compile"
          description="Create jar">
    <mkdir      dir="${build.classes}/META-INF"/>
    <copy      file="LICENSE.txt"
             tofile="${build.classes}/META-INF/LICENSE.txt"/>
    <jar    jarfile="${build.fullname}.jar"
            basedir="${build.classes}"/>
           <!-- manifest="${build.conf}/MANIFEST.MF"/ -->
  </target>

<!-- ====================================================================== -->

  <target name="dist" depends="compile,jar,javadoc"
          description="Create binary distribution">
    <delete     dir="${build.dist.fullname}"/>
    <mkdir      dir="${build.dist.fullname}"/>
    
	<!-- binary -->
    <copy      file="LICENSE.txt" todir="${build.dist.fullname}"/>
    <copy      file="RELEASE-NOTES.txt" todir="${build.dist.fullname}"/>
    <copy      file="${build.fullname}.jar"
              todir="${build.dist.fullname}"/>
    <copy     todir="${build.dist.fullname}">
      <fileset  dir="${build}" includes="docs/**/*.*"/>
    </copy>
    
	<tar   destfile="${build.fullname}.tar" basedir="${build.dist}"/>
	<gzip   zipfile="${build.fullname}.tar.gz" src="${build.fullname}.tar"/>
	<delete    file="${build.fullname}.tar"/>
	<fixcrlf srcdir="${build.dist}" eol="crlf" includes="**/*.txt"/>
	<zip   destfile="${build.fullname}.zip" basedir="${build.dist}"/>
	
	<!-- source -->
	<delete     dir="${build.dist.fullname}/docs"/>
    <copy     todir="${build.dist.fullname}">
      <fileset  dir="." includes="${source}/**/*" excludes="CVS/**/*"/>
    </copy>
    <copy     todir="${build.dist.fullname}">
      <fileset  dir="." includes="${xdocs}/**/*" excludes="CVS/**/*"/>
    </copy>
    <copy      file="build.xml" todir="${build.dist.fullname}"/>
    <copy      file="maven.xml" todir="${build.dist.fullname}"/>
    <copy      file="project.xml" todir="${build.dist.fullname}"/>
    <copy      file="project.properties" todir="${build.dist.fullname}"/>
	
	<tar   destfile="${build.fullname}-src.tar" basedir="${build.dist}"/>
	<gzip   zipfile="${build.fullname}-src.tar.gz" src="${build.fullname}-src.tar"/>
	<delete    file="${build.fullname}-src.tar"/>
	<fixcrlf srcdir="${build.dist}" eol="crlf" includes="**/*.txt"/>
	<zip   destfile="${build.fullname}-src.zip" basedir="${build.dist}"/>
  </target>

</project>
